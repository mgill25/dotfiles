set nu
" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible
set backspace=indent,eol,start

filetype indent plugin on " Detect file type by format or content
filetype plugin on	" Provides Intelligent Auto-Indenting
syntax on 		" Enables Syntax Highlighting	
" set hidden 		" Hides Buffers, even when unsaved. Complaints if exit without saving.
" Hide the toobar and menubar
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
" window for multiple buffers, and/or:
" set confirm
" set autowriteall

" Colorschemes
" Some other light color schemes: blear, summerfruit256, breeze, pyte
" Some modifications to the Zenburn colorscheme.
" Ref: http://statico.github.io/vim.html
function! ColorTermZenburn()
    colorscheme zenburn
    highlight Normal ctermbg=234
    highlight CursorLine ctermbg=236
    let g:zenburn_high_Contrast = 1
endfunction

set t_Co=256              " Explicitly tell vim that the terminal supports 256 colors.

if has("gui_running")  " Terminal supports 256 colors?
    if has("mac")
        colorscheme solarized 
        set guifont=Monaco\ for\ Powerline:h15
        set bg=dark
        " does not work properly on os x
        " an GUIEnter * set fullscreen
    else
        set guifont=Monaco 13
    endif
    " Because solarized is being a bitch
    " set background=dark 
    " call ColorTermZenburn()
    
    " Set colorscheme for diffs
    if &diff
      colorscheme solarized
      set bg=light
    endif
else
    " colorscheme Tomorrow-Night-Bright
    " colorscheme solarized
    " set bg=dark
endif
let g:solarized_diffmode="high"             " Solarized has a beautiful diff contrast

set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ \
                      \ (%{&ff})\ %y\ %{fugitive#statusline()}\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
                      \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\ %L\ lines " requires fugitive.

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart
set wildmenu		" Better Command-Line completion
set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class,*.zip,*.sw[op]
"set wildmode=list:full
set showcmd		" Show partial commands in the last line of the screen
set hlsearch		" Highlight search.
set incsearch
set ignorecase 		" Ignore case when searching
set smartcase		" Ignore case when search pattern all lowercase. Case-sensitive otherwise.

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

"Indentation Settings. Taken from the Hitchhiker's guide to Python.
set scrolloff=5
set title
set ttyfast
"set tabstop=4
"set softtabstop=4
set expandtab 
set shiftround
"set shiftwidth=4
set autochdir

" ------------------------------- Begin Filetype config ---------------------------------
" autocmd FileType sh colorscheme dante
autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType modula2 set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType markdown set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType python setlocal cc=80
autocmd FileType javascript set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType javascript setlocal commentstring=//\ %s
autocmd FileType javascript noremap <buffer> <leader>b :call JsBeautify()<cr>
autocmd FileType javascript let b:javascript_fold = 0
autocmd BufNewFile,BufRead *.json setlocal ft=javascript
let javascript_enable_domhtmlcss=1
autocmd FileType html,htmldjango set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType css set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType cpp set tabstop=8 softtabstop=8 shiftwidth=8
autocmd FileType c set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType cpp set tabstop=4 softtabstop=4 shiftwidth=4
autocmd BufNewFile,BufRead *.go setlocal ft=go
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 
" autocmd Filetype go autocmd BufWritePre <buffer> Fmt
autocmd FileType java set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType sml set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType ruby set expandtab tabstop=2 softtabstop=2 shiftwidth=2 formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType json setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType coffee setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType lua setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType rust setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4
autocmd FileType rust setlocal commentstring=//\ %s
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=8 softtabstop=2
autocmd BufNewFile,BufRead *.sls setlocal ft=yaml
au FileType make setlocal noexpandtab " Don't expand tabs into spaces when editing makefiles
" template language support (SGML / XML too)
" ------------------------------------------
" and disable that stupid html rendering (like making stuff bold etc)
autocmd FileType xml,html,htmljinja,htmldjango setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html,htmljinja,htmldjango imap <buffer> <c-e> <Plug>SparkupExecute
autocmd FileType html,htmljinja,htmldjango imap <buffer> <c-l> <Plug>SparkupNext
autocmd FileType html setlocal commentstring=<!--\ %s\ -->
autocmd FileType htmljinja setlocal commentstring={#\ %s\ #}
autocmd BufWritePre *.py :%s/\s\+$//e   " Removing Trailing Whitespace on buffer write
autocmd BufWritePre *.py :%s/\s\+$//e   " Removing Trailing Whitespace on buffer write
autocmd BufWritePre *.js :%s/\s\+$//e   " Removing Trailing Whitespace on buffer write
autocmd BufRead,BufNewFile **/templates/*.html set filetype=htmljinja
let html_no_rendering=1
" let g:syntastic_html_checkers = []

" Run shortcut for different file types
au FileType python map <leader>r :!python %<CR>
au FileType go map <leader>r :!go run %<CR>
au FileType c map <leader>r :!gcc -Wall -g %; ./a.out<CR>
au FileType cpp map <leader>r :!g++ -Wall -g %; ./a.out<CR>
au FileType ruby map <leader>r :!ruby %<CR>
au FileType perl map <leader>r :!perl %<CR>
au FileType php map <leader>r :!php %<CR>
au FileType javascript map <leader>r :!node %<CR>
au FileType coffee map <leader>r :!coffee %<CR>
" au FileType coffee map <leader>c :!coffee -c %<CR>
" au FileType coffee map <leader>p :!coffee -p %<CR>

" When loading text files, wrap them and don't split up words.
au BufNewFile,BufRead *.txt setlocal wrap 
au BufNewFile,BufRead *.txt setlocal lbr
" Turn on spell-checking in markdown and text.
" au BufRead,BufNewFile *.md,*.txt setlocal spell

" ------------------------------- End Filetype config ---------------------------------

set confirm		" Dialog asking if you want to save changed files.
"set visualbell		" Use visual bell instead of beeping when doing something wrong
" don't bell or blink
set noerrorbells
set vb t_vb=
set mouse=a 		" Enable use of the mouse for all modes
set mousemodel=popup
set pastetoggle=<F2>	" Temporarily disables auto indenting and other stuff. Use right before pasting large amount of code.
" This will stop vim from applying it's own indenting features on the paste.

set showcmd
set laststatus=2		" Always show the status line
set encoding=utf8
set backupdir=~/.tmp
set directory=~/.tmp " Don't clutter my dirs up with swp and tmp files

" Automatically generate Shebang
augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: utf-8 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby -w\<nl># encoding: UTF-8\<nl>\"|$
  autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
  "autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  "autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END

"----------------------------------- Begin Custom Mappings ---------------------------------
let mapleader = ";" "Changing the default <leader> key from \ to ;

"Dot behaves like in normal mode
vnoremap . :norm.<CR>       

"Shortcut for opening Split-Windows
map <leader>o :split<CR>
map <leader>e :vsplit<CR>
map <leader>d :bd<CR>

"Quickly open new tabs
"map <leader>t :tabnew<CR>

" Quickly move a split to a new tab
map <leader>sp :tab sp<CR>

"Easy Split-Window navigation:
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Hide all but current split
map <leader>h <c-w>o

" Clearing the search buffer by pressing ,/ (Note - NOT the leader key)
nmap <silent> ,/ :nohlsearch<CR>

" Reopen a file in sudo-mode by pressing w!!
cmap w!! w !sudo tee % >/dev/null

" clipboard
set clipboard=unnamed

" Column
hi ColorColumn ctermbg=lightgrey guibg=lightgrey

" Cycle through buffers 
map <leader>j :bp<CR>
map <leader>k :bn<CR>

" Move through tabs
map <leader>tn :tabNext<CR>
map <leader>tp :tabprevious<CR>
map <leader>to :tabnew<CR>              "tab open!"

" Quickly Change Font-Size, since it's something I seem to do a lot. - GVim
" nmap <leader>1 :set guifont=Monaco\\ 13<CR>
" nmap <leader>0 :set guifont=Monaco\\ 10<CR>
" nmap <leader>2 :set guifont=DejaVu\\ Sans\\ Mono\\ 10<CR>
" nmap <leader>3 :set guifont=DejaVu\\ Sans\\ Mono\\ 13<CR>

" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
:nmap <leader>v :e $MYVIMRC<CR>

" List directory contents of the file in current buffer
nmap <leader>15 :!ls %:p:h<CR>

" Set the current directory to that of the file in buffer
" For all windows.
nmap <leader>16 :cd %:p:h<CR>       
" Only for current window.
nmap <leader>17 :lcd %:p:h<CR>

" See whitespaces
nnoremap <leader>tab :<C-U>setlocal lcs=tab:>-,trail:-,eol:$ list! list? <CR>

vnoremap <leader>c :!column -t<CR>

"----------------------------------- End Custom Mappings ---------------------------------
" Racket file settings
if has("autocmd")
    au BufReadPost *.rkt,*.rktl set filetype=scheme
endif

" Rename current file
function! RenameFile()
        let old_name = expand('%')
        let new_name = input('New file name: ', expand('%'), 'file')
        if new_name != '' && new_name != old_name
                exec ':saveas ' . new_name
                exec ':silent !rm ' . old_name
                redraw!
        endif
endfunction
map <leader>n :call RenameFile()<CR>

" Auto-reload vimrc
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Make a simple "search" text object.
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" Text under cursor search with Ag
nnoremap <leader>ag :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

" Cursor hacks
" Jump from one key to another in a dictionary
nnoremap <right> va'<esc>f'
nnoremap <left> va'o<esc>F'va'o<esc>l

"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber

" Tmux status bar hack
" autocmd VimEnter,VimLeave * silent !tmux set status
" Fix for E303 bug
" set directory=.,$TEMP


" -------------- Plugins --------------------------------
" This is the part that makes vim slower than I'd like :(

" Maintained using vim-plug: https://github.com/junegunn/vim-plug

call plug#begin('~/.vim/plugged')

" Make sure to use single quotes
Plug 'kien/ctrlp.vim'
Plug 'JazzCore/ctrlp-cmatcher'
Plug 'tpope/vim-fugitive'

call plug#end()

" ------------- Plugin auxiliary stuff ------------------

" CtrlP
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

map <leader>f :CtrlPBuffer<CR>
let g:ctrlp_dotfiles = 0 " Don't scan for dotfiles and dotdirs
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20'

" Use The Silver Searcher for Indexing
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .so
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ --ignore .pdf
      \ --ignore .db
      \ --ignore .rdb
      \ --ignore .tgz
      \ --ignore .bat
      \ --ignore .cson
      \ -g ""'
" Use a faster matcher written in C
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/]\.(git|hg|svn|pdf|db|bat)$',
\ 'file': '\v\.(exe|so|dll)$',
\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
\ }

" Fugitive aliases
nnoremap <leader>gs :Gstatus<CR>
