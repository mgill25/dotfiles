set nu
" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible
set backspace=indent,eol,start

filetype indent plugin on " Detect file type by format or content
filetype plugin on	" Provides Intelligent Auto-Indenting
syntax on 		" Enables Syntax Highlighting	
" set hidden 		" Hides Buffers, even when unsaved. Complaints if exit without saving.
" Hide the toobar and menubar
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
" window for multiple buffers, and/or:
" set confirm
" set autowriteall

" Colorschemes
" Some other light color schemes: blear, summerfruit256, breeze, pyte
set t_Co=256              " Explicitly tell vim that the terminal supports 256 colors.
if has("gui_running")  " Terminal supports 256 colors?
    colorscheme gruvbox
    set bg=dark
    if has("mac")
        set guifont=Monaco:h13
        " does not work properly on os x
        " an GUIEnter * set fullscreen
    else
        set guifont=Monaco\ 13
    endif
    " Because solarized is being a bitch
    " let g:solarized_diffmode="high"       
    " set background=dark 
else
    colorscheme gruvbox 
    set bg=dark 
endif

let g:virtualenv_stl_format='[Active venv:%n]'
set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ %{virtualenv#statusline()}\
                        \ (%{&ff})\ %y\ %{fugitive#statusline()}\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
                        \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\ %L\ lines " requires fugitive.

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart
set wildmenu		" Better Command-Line completion
set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class,*.zip,*.sw[op]
"set wildmode=list:full
set showcmd		" Show partial commands in the last line of the screen
set hlsearch		" Highlight search.
set incsearch
set ignorecase 		" Ignore case when searching
set smartcase		" Ignore case when search pattern all lowercase. Case-sensitive otherwise.

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

"Indentation Settings. Taken from the Hitchhiker's guide to Python.
set scrolloff=5
set title
set ttyfast
"set tabstop=4
"set softtabstop=4
set expandtab 
set shiftround
"set shiftwidth=4
autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType javascript set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType javascript setlocal commentstring=//\ %s
autocmd FileType javascript noremap <buffer> <leader>b :call JsBeautify()<cr>
autocmd FileType javascript let b:javascript_fold = 0
autocmd BufNewFile,BufRead *.json setlocal ft=javascript
let javascript_enable_domhtmlcss=1
autocmd FileType html,htmldjango set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType css set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType cpp set tabstop=8 softtabstop=8 shiftwidth=8
autocmd FileType c set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType cpp set tabstop=4 softtabstop=4 shiftwidth=4
autocmd BufNewFile,BufRead *.go setlocal ft=go
autocmd FileType go setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4 
" autocmd Filetype go autocmd BufWritePre <buffer> Fmt
autocmd FileType java set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType sml set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType ruby set expandtab tabstop=2 softtabstop=2 shiftwidth=2 formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType json setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType coffee setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType lua setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType rust setlocal expandtab shiftwidth=4 tabstop=8 softtabstop=4
autocmd FileType rust setlocal commentstring=//\ %s
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=8 softtabstop=2
autocmd BufNewFile,BufRead *.sls setlocal ft=yaml
au FileType make setlocal noexpandtab " Don't expand tabs into spaces when editing makefiles
" template language support (SGML / XML too)
" ------------------------------------------
" and disable that stupid html rendering (like making stuff bold etc)
autocmd FileType xml,html,htmljinja,htmldjango setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html,htmljinja,htmldjango imap <buffer> <c-e> <Plug>SparkupExecute
autocmd FileType html,htmljinja,htmldjango imap <buffer> <c-l> <Plug>SparkupNext
autocmd FileType html setlocal commentstring=<!--\ %s\ -->
autocmd FileType htmljinja setlocal commentstring={#\ %s\ #}
autocmd BufWritePre *.py :%s/\s\+$//e   " Removing Trailing Whitespace on buffer write
autocmd BufWritePre *.go :%s/\s\+$//e   " Removing Trailing Whitespace on buffer write
autocmd BufRead,BufNewFile **/templates/*.html set filetype=htmljinja
let html_no_rendering=1
let g:syntastic_html_checkers = []

" Run shortcut for different file types
au FileType python map <leader>r :!python %<CR>
au FileType go map <leader>r :!go run %<CR>
au FileType c map <leader>r :!gcc -Wall -g %; ./a.out<CR>
au FileType cpp map <leader>r :!g++ -Wall -g %; ./a.out<CR>
au FileType ruby map <leader>r :!ruby %<CR>
au FileType perl map <leader>r :!perl %<CR>
au FileType php map <leader>r :!php %<CR>
au FileType javascript map <leader>r :!node %<CR>
au FileType coffee map <leader>r :!coffee %<CR>
au FileType coffee map <leader>c :!coffee -c %<CR>
au FileType coffee map <leader>p :!coffee -p %<CR>

" When loading text files, wrap them and don't split up words.
au BufNewFile,BufRead *.txt setlocal wrap 
au BufNewFile,BufRead *.txt setlocal lbr
" Turn on spell-checking in markdown and text.
" au BufRead,BufNewFile *.md,*.txt setlocal spell

set confirm		" Dialog asking if you want to save changed files.
"set visualbell		" Use visual bell instead of beeping when doing something wrong
" don't bell or blink
set noerrorbells
set vb t_vb=
set mouse=a 		" Enable use of the mouse for all modes
set mousemodel=popup
set pastetoggle=<F2>	" Temporarily disables auto indenting and other stuff. Use right before pasting large amount of code.
" This will stop vim from applying it's own indenting features on the paste.

set showcmd
set laststatus=2		" Always show the status line
set encoding=utf8
set backupdir=~/.tmp
set directory=~/.tmp " Don't clutter my dirs up with swp and tmp files
  
" Automatically generate Shebang
augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: utf-8 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby -w\<nl># encoding: UTF-8\<nl>\"|$
  autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
  "autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  "autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END

" Vundle Stuff
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle (required)!
Bundle 'gmarik/vundle'

" My bundles
Bundle 'ervandew/supertab'
Bundle 'Raimondi/delimitMate'
Bundle 'garbas/vim-snipmate.git'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'vim-ruby/vim-ruby'
Bundle 'scrooloose/nerdtree'
Bundle 'jmartindf/vim-tcomment'
Bundle 'edsono/vim-matchit'
Bundle "MarcWeber/vim-addon-mw-utils.git"
Bundle "tomtom/tlib_vim.git"
Bundle 'sjl/gundo.vim'
Bundle 'nvie/vim-flake8'
Bundle 'kien/ctrlp.vim'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'majutsushi/tagbar'
Bundle 'epmatsw/ag.vim'
Bundle 'tpope/vim-endwise.git'
Bundle 'scrooloose/syntastic.git'
Bundle 'jmcantrell/vim-virtualenv'
Bundle 'kchmck/vim-coffee-script'
Bundle 'mtth/scratch.vim'

"-------------- Some Custom Mappings ---------------------------------
let mapleader = ";" "Changing the default <leader> key from \ to ;

map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc$', '\.pyo$', '\.class$', 'pip-log\.txt$', '\.o$']
let NERDTreeShowBookmarks=1 " Display the NERDTree Bookmarks table on vim startup

"Dot behaves like in normal mode
vnoremap . :norm.<CR>       

" gundo
nnoremap <Leader>u :GundoToggle<CR>

"Shortcut for opening Split-Windows
map <leader>o :split
map <leader>e :vsplit
map <leader>d :bd<CR>

"Quickly open new tabs
"map <leader>t :tabnew<CR>

" Quickly move a split to a new tab
map <leader>sp :tab sp<CR>

"Easy Split-Window navigation:
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Clearing the search buffer by pressing ,/ (Note - NOT the leader key)
nmap <silent> ,/ :nohlsearch<CR>

" Reopen a file in sudo-mode by pressing w!!
cmap w!! w !sudo tee % >/dev/null

" CtrlP
map <leader>f :CtrlPBuffer<CR>
let g:ctrlp_dotfiles = 0 " Don't scan for dotfiles and dotdirs
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20'

" g:tagbar_ctags_bin
nmap <leader>q :TagbarToggle<CR>

" clipboard
set clipboard=unnamed

" Cycle through buffers 
map <leader>j :bp<CR>
map <leader>k :bn<CR>

" Quickly Change Font-Size, since it's something I seem to do a lot.
nmap <leader>1 :set guifont=Monaco\ 13<CR>
nmap <leader>0 :set guifont=Monaco\ 10<CR>
nmap <leader>2 :set guifont=DejaVu\ Sans\ Mono\ 10<CR>
nmap <leader>3 :set guifont=DejaVu\ Sans\ Mono\ 13<CR>

" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <leader>vs :source $MYVIMRC<CR>
" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
:nmap <leader>v :e $MYVIMRC<CR>
" opens a scratch buffer -- requires scratch.vim
nmap <leader>s :ScratchInsert<CR>
let g:scratch_top = 0

" List directory contents of the file in current buffer
nmap <leader>15 :!ls %:p:h<CR>

" Set the current directory to that of the file in buffer
" For all windows.
nmap <leader>16 :cd %:p:h<CR>       
" Only for current window.
nmap <leader>17 :lcd %:p:h<CR>

" Generate python ctags
" map <F12> :!ctags -R -f ./tags `python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"`<CR>

" Flake8 mapping
autocmd FileType python map <buffer> <leader>8 :call Flake8()<CR>
" Call Flake8 every time a Python file is written.
" autocmd BufWritePost *.py call Flake8()           

" Python settings
let g:syntastic_python_checkers=['flake8', 'python']

" Don't warn on
"   E121 continuation line indentation is not a multiple of four
"   E128 continuation line under-indented for visual indent
"   E711 comparison to None should be 'if cond is not None:'
"   E301 expected 1 blank line, found 0
"   E261 at least two spaces before inline comment
"   E241 multiple spaces after ':'
"   E124 closing bracket does not match visual indentation
"   E126 continuation line over-indented for hanging indent
"   E721 do not compare types, use 'isinstance()'
"   E501 line too long
let g:syntastic_python_flake8_args='--ignore=E121,E128,E711,E301,E261,E241,E124,E126,E721,E501
    \ --max-line-length=84'

" delimitMate
let delimitMate_expand_cr = 2
" let delimitMate_expand_space = 1
" imap <C-Return> <CR><CR><C-o>k<Tab>
" inoremap { {<CR>}<Esc>O

" Javascript settings
let javascript_enable_domhtmlcss=1
let g:syntastic_javascript_checkers = ['jshint'] 
let g:syntastic_javascript_jshint_args='--config ~/.vim/extern-cfg/jshint.json'

" Racket file settings
if has("autocmd")
    au BufReadPost *.rkt,*.rktl set filetype=scheme
endif

" Rename current file
function! RenameFile()
        let old_name = expand('%')
        let new_name = input('New file name: ', expand('%'), 'file')
        if new_name != '' && new_name != old_name
                exec ':saveas ' . new_name
                exec ':silent !rm ' . old_name
                redraw!
        endif
endfunction
map <leader>n :call RenameFile()<CR>

" Absolute/Relative Line Number Toggle
function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunction

" Delete buffer in CtrlP Mode
let g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }

func! MyCtrlPMappings()
    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>
endfunc

func! s:DeleteBuffer()
    let line = getline('.')
    let bufid = line =~ '\[\d\+\*No Name\]$' ? str2nr(matchstr(line, '\d\+'))
        \ : fnamemodify(line[2:], ':p')
    exec "bd" bufid
    exec "norm \<F5>"
endfunc

nnoremap <leader>t :call NumberToggle()<CR>
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber

" Fix for E303 bug
" set directory=.,$TEMP

" Settings for GoLang
" Some Linux distributions set filetype in /etc/vimrc.
" Clear filetype flags before changing runtimepath to force Vim to reload them.
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
syntax on
