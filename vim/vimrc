set nu
" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible
set backspace=indent,eol,start

filetype indent plugin on " Detect file type by format or content
filetype plugin on	" Provides Intelligent Auto-Indenting
syntax on 		" Enables Syntax Highlighting	
" set hidden 		" Hides Buffers, even when unsaved. Complaints if exit without saving.
" Hide the toobar and menubar
" set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
" window for multiple buffers, and/or:
" set confirm
" set autowriteall

" Colorscheme for the GVim 
"set t_Co=256              " Explicitly tell vim that the terminal supports 256 colors.
if &t_Co >= 256 || has("gui_running")  " Terminal supports 256 colors?
    "set guifont=Droid\ Sans\ Mono\ 9
    set guifont=Monaco\ 10
    "set guifont=Inconsolata\ 14
    "set background=light
    colorscheme macvim
    "set background=dark 
else
    " Temporary colorscheme for the gnome-terminal
    " colorscheme grb256 
    colorscheme default 
    " set bg=dark 
endif
let g:solarized_diffmode="high"       
"set bg=dark
" let g:molokai_original=1

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart
set wildmenu		" Better Command-Line completion
set wildignore=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class,*.zip,*.sw[op]
"set wildmode=list:full
set showcmd		" Show partial commands in the last line of the screen
set hlsearch		" Highlight search.
set ignorecase 		" Ignore case when searching
set smartcase		" Ignore case when search pattern all lowercase. Case-sensitive otherwise.

"Indentation Settings. Taken from the Hitchhiker's guide to Python.
set scrolloff=5
set title
set ttyfast
"set tabstop=4
"set softtabstop=4
set expandtab 
set shiftround
"set shiftwidth=4
autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType javascript set tabstop=2 softtabstop=2 shiftwidth=2
autocmd BufNewFile,BufRead *.json setlocal ft=javascript
let javascript_enable_domhtmlcss=1
autocmd FileType html,htmldjango set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType css set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType cpp set tabstop=8 softtabstop=8 shiftwidth=8
autocmd FileType c set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType sml set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType ruby set expandtab tabstop=2 softtabstop=2 shiftwidth=2 formatoptions-=c formatoptions-=r formatoptions-=o
au FileType make setlocal noexpandtab " Don't expand tabs into spaces when editing makefiles

" When loading text files, wrap them and don't split up words.
au BufNewFile,BufRead *.txt setlocal wrap 
au BufNewFile,BufRead *.txt setlocal lbr
" Turn on spell-checking in markdown and text.
" au BufRead,BufNewFile *.md,*.txt setlocal spell

set confirm		" Dialog asking if you want to save changed files.
"set visualbell		" Use visual bell instead of beeping when doing something wrong
set mouse=a 		" Enable use of the mouse for all modes
set mousemodel=popup
set pastetoggle=<F2>	" Temporarily disables auto indenting and other stuff. Use right before pasting large amount of code.
" This will stop vim from applying it's own indenting features on the paste.

" Change the statusline display to something that looks useful.
" set cmdheight=2
set statusline=[%l,%v\ %P%M]\ %f\ %r%h%w\ (%{&ff})\ %{fugitive#statusline()}\ \-\-\-\-\-\-\-\-\-\ %L\ lines " requires fugitive.
set showcmd

set laststatus=2		" Always show the status line
set encoding=utf-8
set backupdir=~/.tmp
set directory=~/.tmp " Don't clutter my dirs up with swp and tmp files

" Automatically generate Shebang
augroup Shebang
  autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: utf-8 -*-\<nl>\"|$
  autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby -w\<nl># -*- coding: utf-8 -*-\<nl>\"|$
  autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
  "autocmd BufNewFile *.tex 0put =\"%&plain\<nl>\"|$
  "autocmd BufNewFile *.\(cc\|hh\) 0put =\"//\<nl>// \".expand(\"<afile>:t\").\" -- \<nl>//\<nl>\"|2|start!
augroup END

" Vundle Stuff
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle (required)!
Bundle 'gmarik/vundle'

" My bundles
Bundle 'ervandew/supertab'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'vim-ruby/vim-ruby'
Bundle 'klen/python-mode'
Bundle 'scrooloose/nerdtree'
Bundle 'jmartindf/vim-tcomment'
Bundle 'edsono/vim-matchit'
Bundle "git://github.com/MarcWeber/vim-addon-mw-utils.git"
Bundle "git://github.com/tomtom/tlib_vim.git"
Bundle 'sjl/gundo.vim'
Bundle 'nvie/vim-flake8'
Bundle 'kien/ctrlp.vim'
Bundle 'mattn/gist-vim'
Bundle 'majutsushi/tagbar'
Bundle 'git://github.com/Bogdanp/pyrepl.vim.git'
"-------------- Some Custom Mappings ---------------------------------
let mapleader = ";" "Changing the default <leader> key from \ to ;

map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc$', '\.pyo$', '\.class$', 'pip-log\.txt$', '\.o$']
let NERDTreeShowBookmarks=1 " Display the NERDTree Bookmarks table on vim startup


" gundo
nnoremap <Leader>u :GundoToggle<CR>

"Shortcut for opening Split-Windows
map <leader>o :split
map <leader>e :vsplit

"Quickly open new tabs
map <leader>t :tabnew<CR>

"Easy Split-Window navigation:
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Clearing the search buffer by pressing ,/ (Note - NOT the leader key)
nmap <silent> ,/ :nohlsearch<CR>

" Reopen a file in sudo-mode by pressing w!!
cmap w!! w !sudo tee % >/dev/null

map <leader>b :CtrlPBuffer<CR>
let g:ctrlp_dotfiles = 0 " Don't scan for dotfiles and dotdirs

" Tagbar mappings
" g:tagbar_ctags_bin
nmap <leader>q :TagbarToggle<CR>

" Clipboard settings
"copy to the clipboardd
vmap <leader>y :<Esc>`>a<CR><Esc>mx`<i<CR><Esc>my'xk$v'y!xclip -selection c<CR>u 

"paste from the clipboard
map <leader>p :set paste<CR>i<CR><CR><Esc>k:.!xclip -o<CR>JxkJx:set nopaste<CR>

" Cycle through buffers 
map <leader>j :bp<CR>
map <leader>k :bn<CR>

" Quickly Change Font-Size, since it's something I seem to do a lot.
nmap <leader>1 :set guifont=Monaco\ 13<CR>
nmap <leader>0 :set guifont=Monaco\ 10<CR>
nmap <leader>2 :set guifont=DejaVu\ Sans\ Mono\ 10<CR>
nmap <leader>3 :set guifont=DejaVu\ Sans\ Mono\ 13<CR>

" PyREPL
map <leader>e :PyREPLToggle<CR>
map <leader>l :PyREPLEvalFile<CR>

" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <leader>s :source $MYVIMRC<CR>
" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
:nmap <leader>v :e $MYVIMRC<CR>

" Generate python ctags
" map <F12> :!ctags -R -f ./tags `python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"`<CR>

" Flake8 mapping
autocmd FileType python map <buffer> <leader>8 :call Flake8()<CR>
" Call Flake8 every time a Python file is written.
" autocmd BufWritePost *.py call Flake8()           

" Python-mode settings 
let g:pymode_folding = 0
let g:pymode_doc = 0
let g:pymode_lint_write = 0

" Racket file settings
if has("autocmd")
    au BufReadPost *.rkt,*.rktl set filetype=scheme
endif

" Rename current file
function! RenameFile()
        let old_name = expand('%')
        let new_name = input('New file name: ', expand('%'), 'file')
        if new_name != '' && new_name != old_name
                exec ':saveas ' . new_name
                exec ':silent !rm ' . old_name
                redraw!
        endif
endfunction
map <leader>n :call RenameFile()<CR>

" Absolute/Relative Line Number Toggle
function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunction
nnoremap <leader>g :call NumberToggle()<CR>
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber
