(require 'linum)
(global-linum-mode t)
(setq linum-format "%2d ")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" default)))
 '(quack-programs (quote ("mzscheme" "bigloo" "csi" "csi -hygienic" "gosh" "gracket" "gsi" "gsi ~~/syntax-case.scm -" "guile" "kawa" "mit-scheme" "racket" "racket -il typed/racket" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi")))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tool-bar-mode nil))

;; arg >= 1 enable the menu bar. Menu bar is the File, Edit, Options,
;; Buffers, Tools, Emacs-List, Help

;; Font Settings
;(set-default-font "DejaVu Sans Mono-11")
;(set-default-font "Inconsolata-15")
;(set-default-font "Monospace-11")
(set-default-font "Monaco for Powerline-13:width=condensed")

;; Custom Theme Load Path
;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-color-theme-solarized")
;(load-theme 'solarized-dark t)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'ir-black t)

;; Kill the welcome buffer
(setq inhibit-startup-message t)

;; Disable the menu bar and the tool bar
;(menu-bar-mode 0)
(tool-bar-mode 0)

;; Show matching parans
(show-paren-mode 1)

;; Use spaces instead of tabs for indentation
(setq indent-tabs-mode nil)

;; Turn on Syntax highlighting
(global-font-lock-mode t)
(load-library "font-lock")
(setq font-lock-maximum-decoration t)

;; Set backup directory location
(setq backup-directory-alist '(("." . "~/.emacs.d/saves/")))

;; Make backups by copying
(setq backup-by-copying-when-linked t)

(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
                        
;; No easy way to jump to matching parenthesis, so we make a mapping!
;; Just like in vim, we use the % sign to jump to matching paren.
(global-set-key "%" 'match-paren)

(defun match-paren (arg)
 "Go to the matching paren if on a paren; otherwise, insert %."
(interactive "p")
(cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
      ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
      (t (self-insert-command (or arg 1)))))

;; Map <C-j> to Return for auto-indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Load Packages
;; Geiser, Quack, ParEdit
(load-file "~/.emacs.d/packages/geiser/elisp/geiser.el")
(load-file "~/.emacs.d/packages/quack.el")
(load-file "~/.emacs.d/packages/paredit.el")
(load-file "~/.emacs.d/packages/pretty-mode.el")
;; Autoload the ParEdit mode with Emacs' Lisp modes
(autoload 'paredit-mode "paredit"
  "Minor mode for pseudo-structurally editing Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
(add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
(add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
(add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
;; Hooks for pretty-mode for lisp and scheme - Pretty-print the greek letters like lambda!
(add-hook 'scheme-mode-hook 'turn-on-pretty-mode)
(add-hook 'lisp-mode-hook 'turn-on-pretty-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-pretty-mode)

;; Make tooltips appear in the echo area
(tooltip-mode 1)
(setq tooltip-use-echo-area t)
;; yes-or-no => y-or-n
(fset 'yes-or-no-p 'y-or-n-p)
;; Kill a buffer without asking
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))

;; Full Screen! 
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
	(set-frame-parameter nil 'fullscreen
						 (if (equal 'fullboth current-value)
							 (if (boundp 'old-fullscreen) old-fullscreen nil)
						   (progn (setq old-fullscreen current-value)
								  'fullboth)))))

(global-set-key [f11] 'toggle-fullscreen)

;; Add Python Documentation inside Emacs info docs
(add-to-list 'load-path "~/.emacs.d/packages/")
(require 'pydoc-info)

;; Auto-Complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/packages//ac-dict")
(ac-config-default)

;; Company Mode
(add-to-list 'load-path "~/.emacs.d/packages/company")
(autoload 'company-mode "company" nil t)

;; SML Mode Configuration
(autoload 'sml-mode "sml-mode" "Major mode for editing SML." t)
(setq auto-mode-alist
      (cons '("\.sml$" . sml-mode)
	    auto-mode-alist))
(setq sml-program-name "/usr/local/sml/bin/sml")
(add-hook 'sml-mode-hook 'electric-indent-mode)
;; Hook for quickly restarting REPL and loading current file
(require 'cl)
(add-hook 'sml-mode-hook
          (lambda ()
            (define-key sml-mode-map (kbd "C-c C-v") 'my-sml-restart-repl-and-load-current-file)
            (defun my-sml-restart-repl-and-load-current-file ()
              (interactive)
              (ignore-errors (with-current-buffer "*sml*"
                               (comint-interrupt-subjob)
                               (comint-send-eof)
                               (let ((some-time 0.1))
                                 (while (process-status (get-process "sml"))
                                   (sleep-for some-time)))))      
              (flet ((sml--read-run-cmd ()
                                        '("/usr/local/sml/bin/sml" "" nil)))   ; (command args host)  
                (sml-prog-proc-send-buffer t)))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Toggle between buffer horizontal and vertical split.
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(define-key ctl-x-4-map "t" 'toggle-window-split)
